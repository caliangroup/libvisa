use bindgen::builder;

fn main() {
    if let Err(e) = create_bindings() {
        eprintln!("{e}");
    }
}

fn create_bindings() -> Result<(), Box<dyn std::error::Error>> {
    let visa_path = std::env::var("VISA_DIR")?;
    let visa_path = std::path::PathBuf::from(visa_path);

    let header_path = visa_path.join("Include").join("visa.h");
    let header_path = header_path.to_str().ok_or("Invalid path")?;
    let bindings = builder()
        .header(header_path)
        .generate_comments(true)
        .raw_line("//! RAW FFI Bindings to the NI-VISA library")
        .raw_line("//! Do not modify this file, it is generated by build.rs")
        .raw_line("#![allow(non_camel_case_types)]")
        .generate()?;

    // Output to src/bindings.rs
    let current = std::env::current_dir()?;
    let out_path = current.join("src").join("bindings.rs");
    bindings.write_to_file(out_path)?;

    Ok(())
}
